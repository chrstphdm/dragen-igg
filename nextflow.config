includeConfig 'conf/manifest.config' 
includeConfig 'conf/genomes.config'
includeConfig 'conf/profiles.config'
includeConfig 'conf/annotation_db.config'

cleanup      = System.getenv('DO_CLEANUP')

params {


	// Input
	COHORT= 'NA'
	input_file = 'NA'
	step = 0
	meta = false

	today               = System.getenv('TODAY') // set by the wrapper
    output_repo     	= System.getenv('OUTPUT_REPO')
   
    // IGG
    SHARD_SIZE = 100
	SHARDS = (1 .. params.SHARD_SIZE)
	MAX_SUBREGION_SIZE = 10000 
	CONCURRENCY_REGION_SIZE = 100000 
	REMOVE_NON_REF = true
	publish_dir_mode	= 'copy'
	genome_build = 'GRCh38'
	vep_version  = '110_GRCh38'
	do_annot = true
	dragen_bin_path = '/mnt/software/MY_ORG_SOFTWARE/Dragen/dragen-softwaremode-4.2.7_5_gc49bbac7.el8.x86_64/bin/dragen'

	// computed system PATH
	step_label = 'Step'+params.step
	this_input_name  = getOutDir(params.input_file)
    cohorts_dir = params.meta ? 'META_COHORTS' : 'COHORTS'
	iterations = params.step==1 ? 'BATCHES' : 'VERSIONS'
    simple_cohorts_path = params.output_repo + '/COHORTS'
	this_cohort_iterations_dir = params.output_repo + '/' + params.cohorts_dir + '/' + params.COHORT + '/' + params.iterations
	this_iteration_dir = params.this_cohort_iterations_dir + '/' + params.this_input_name
	this_cohort_batchs_dir = params.output_repo + '/' + params.cohorts_dir + '/' + params.COHORT + '/BATCHES' 
	this_cohort_versions_dir = params.output_repo + '/' + params.cohorts_dir + '/' + params.COHORT + '/VERSIONS' 
	this_step_dir = "${params.this_iteration_dir}/${params.step_label}"
	tracedir      = "${params.this_step_dir}/pipeline_info"

	// References
	fasta 		 = params.genomes."${genome_build}".fasta
	fasta_idx 	 = params.genomes."${genome_build}".fasta_idx

    // VEP
    vep_cache_dir = params.vep."${vep_version}".cache_dir	
    vep_VERSION = params.vep."${vep_version}".VERSION     
    vep_BUILD = params.vep."${vep_version}".BUILD       
    vep_Loftee_data = params.vep."${vep_version}".Loftee_data		
    vep_Loftee_code = params.vep."${vep_version}".Loftee_code		
    vep_HGMD = params.vep."${vep_version}".HGMD			
    vep_HGMD_idx = params.vep."${vep_version}".HGMD_idx		
    vep_ClinVar = params.vep."${vep_version}".ClinVar			
    vep_ClinVar_idx = params.vep."${vep_version}".ClinVar_idx		
    vep_GNOMAD_GEN = params.vep."${vep_version}".GNOMAD_GEN		
    vep_GNOMAD_GEN_idx = params.vep."${vep_version}".GNOMAD_GEN_idx	
    vep_GNOMAD_EXO = params.vep."${vep_version}".GNOMAD_EXO		
    vep_GNOMAD_EXO_idx = params.vep."${vep_version}".GNOMAD_EXO_idx	
}







// Load base.config by default for all pipelines
includeConfig 'conf/base.config'


// Load more modules specific config for DSL2 module specific options

includeConfig 'conf/modules/step_1.config'
includeConfig 'conf/modules/step_2.config'
includeConfig 'conf/modules/step_3.config'
includeConfig 'conf/modules/step_4.config'
includeConfig 'conf/modules/step_5.config'
includeConfig 'conf/modules/annotation.config'


// Tracing
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${params.today}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${params.today}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${params.today}.txt"
}
dag {
    enabled = false
    file    = "${params.tracedir}/pipeline_dag_${params.today}.html"
}





////////// FUNTIONS
import java.text.SimpleDateFormat
import java.io.File

def getOutDir(input_file){
	def batch_f = new File(input_file)
	def batch_name = batch_f.getSimpleName()
	return batch_name
}



// Function to ensure that resource requirements don't go beyond
// a maximum limit
// def check_max(obj, type) {
//     if (type == 'memory') {
//         try {
//             if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
//                 return params.max_memory as nextflow.util.MemoryUnit
//             else
//                 return obj
//         } catch (all) {
//             println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
//             return obj
//         }
//     } else if (type == 'time') {
//         try {
//             if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
//                 return params.max_time as nextflow.util.Duration
//             else
//                 return obj
//         } catch (all) {
//             println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
//             return obj
//         }
//     } else if (type == 'cpus') {
//         try {
//             return Math.min( obj as int , params.max_cpus as int )
//         } catch (all) {
// 			System.out.println(all);
//             println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
//             return obj
//         }
//     }
// }
